---
title: "ons_energy_report"
format:
  html:
    code-fold: true
    code-summary: "Code"
editor: visual
---

## Quarto

Priority \* Do some analysis of inflation by region If a region shows high levels of food inflation, then energy intensity of food in that region might be more than the UK level in the ONS article \* do an interactive regional plot \* Try and predict next month's

https://quarto.org/docs/output-formats/html-code.html

```{r}
# loading packages
pacman::p_load(janitor,
               dplyr)

# reading data
prices_2023_07 <- read.csv("./data/upload-pricequotes202307.csv")

# cleaning column names
prices_2023_07 <- prices_2023_07 |>
  clean_names()

# removing quotes that are not valid
prices_2023_07 <- prices_2023_07 |>
  filter(validity %in% c(3, 4),
         base_validity %in% c(3, 4),
         region != 1)

# replacing reference value terms with text
prices_2023_07 <- prices_2023_07 |>
  mutate(
    shop_type = case_when(
      shop_type == 1 ~ "Multiple",
      TRUE ~ "Independent"),
    region = case_when(
      region == 2 ~ "London",
      region == 3 ~ "South East England",
      region == 4 ~ "South West England",
      region == 5 ~ "East Anglia",
      region == 6 ~ "East Midlands",
      region == 7  ~ "West Midlands",
      region == 8 ~ "Yorks & Humber",
      region == 9 ~ "North West England",
      region == 10 ~ "North East England",
      region == 11 ~ "Wales",
      region == 12 ~ "Scotland",
      region == 13 ~ "Northern Ireland")
    )

prices_2023_07 |>
  count(base_validity)

```

```{r}
# Geospatial part


```

-   Interactive map
-   Distribution of fuel poverty (e.g. no one below 5%)
-   Try and calculate fuel_poverty based only on neighbours fuel poverty

```{r}
# loading packages
if (!require("pacman")) install.packages("pacman")

pacman::p_load(readxl, janitor, dplyr, stringr, sf, tmap, leaflet)


# reading fuel poverty data
fuel_poverty <- read_xlsx("./data/sub-regional-fuel-poverty-tables-2023-2021-data.xlsx",
                          sheet = "Table 2",
                          skip = 2)


# cleaning data
fuel_poverty <- fuel_poverty |>
  clean_names()

fuel_poverty <- fuel_poverty |>
  rename(area_codes = area_codes_note_4,
         region = area_names,
         subregion = x3,
         area_name = x4,
         households_total = number_of_households,
         households_fp = number_of_households_in_fuel_poverty,
         households_fp_pct = proportion_of_households_fuel_poor_percent)

fuel_poverty <- fuel_poverty |>
  filter(!(is.na(households_fp)))

# removing areas that are a collection of smaller areas
# only want the smallest level available in the data
fuel_poverty <- fuel_poverty |>
  filter(!(str_detect(area_codes, "^E1") | str_detect(area_codes, "^E9")))

# tidying up area name column
fuel_poverty <- fuel_poverty |>
  mutate(area_name = if_else(is.na(area_name), subregion, area_name)) |>
  select(-c(region, subregion))


# reading in geospatial data
lad_shp <- sf::st_read("./data/LAD_MAY_2023_UK_BUC_V2.shp", quiet = TRUE)

fuel_poverty <- left_join(fuel_poverty,
                          lad_shp,
                          join_by(area_codes == LAD23CD))

```

```{r}

fuel_poverty_sf <- sf::st_as_sf(fuel_poverty)

tmap::tmap_mode("plot")

tm_shape(fuel_poverty_sf) +
  tm_polygons(col = "households_fp_pct",
              title = "Proportion of households\nin fuel poverty") +
  tm_layout(title = "Fuel poverty is widespread throughout England and Wales",
            frame = FALSE,
            inner.margins = c(0.1, 0.1, 0.1, 0.1))


fuel_poverty_sf |>
  count(area_name) |>
  arrange(desc(n))

fuel_poverty_sf2 <- fuel_poverty_sf |>
  select(-c(BNG_E, BNG_N, LAT, LONG))

leaflet(st_transform(fuel_poverty_sf2, 4326)) %>%
  addPolygons()





```
